// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String?
  avatar_url String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // リレーション
  user_locations UserLocation[]
  photos         Photo[]

  @@map("users")
}

model Location {
  id          String   @id @default(uuid())
  name        String
  address     String?
  latitude    Float?
  longitude   Float?
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // リレーション
  user_locations UserLocation[]
  photos         Photo[]

  @@map("locations")
}

model UserLocation {
  id         String   @id @default(uuid())
  user_id    String
  location_id String
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // リレーション
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  location Location @relation(fields: [location_id], references: [id], onDelete: Cascade)

  @@unique([user_id, location_id])
  @@map("user_locations")
}

model Photo {
  id          String   @id @default(uuid())
  user_id     String
  location_id String
  file_url    String
  caption     String?
  taken_at    DateTime @default(now())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // リレーション
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  location Location @relation(fields: [location_id], references: [id], onDelete: Cascade)

  @@map("photos")
}
